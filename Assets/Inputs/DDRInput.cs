//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DDRInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DDRInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DDRInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DDRInput"",
    ""maps"": [
        {
            ""name"": ""DDR"",
            ""id"": ""9c0901f4-d08e-40a5-b930-f46e550f4caf"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""674745e8-0a3b-4e98-abb2-b9ddc1d6457f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""077099af-c4d4-4eb6-b498-5d99feeb0ce1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""5746ddf3-a69d-49fb-87dd-93defea17911"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""1016ba8e-4de9-4239-a92e-eccf262a1c17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3d8d2276-8dee-4f1d-a8b7-b2e60effce7f"",
                    ""path"": ""<HID::ga451-usb device>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df38254e-a3bb-44ec-8392-d980194daada"",
                    ""path"": ""<HID::ga451-usb device>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b06acc9-f220-4841-8236-ee0ba20638e1"",
                    ""path"": ""<HID::ga451-usb device>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57d87c0e-d4ce-4959-a58e-425c8f934c88"",
                    ""path"": ""<HID::ga451-usb device>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DDR
        m_DDR = asset.FindActionMap("DDR", throwIfNotFound: true);
        m_DDR_Up = m_DDR.FindAction("Up", throwIfNotFound: true);
        m_DDR_Down = m_DDR.FindAction("Down", throwIfNotFound: true);
        m_DDR_Left = m_DDR.FindAction("Left", throwIfNotFound: true);
        m_DDR_Right = m_DDR.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DDR
    private readonly InputActionMap m_DDR;
    private List<IDDRActions> m_DDRActionsCallbackInterfaces = new List<IDDRActions>();
    private readonly InputAction m_DDR_Up;
    private readonly InputAction m_DDR_Down;
    private readonly InputAction m_DDR_Left;
    private readonly InputAction m_DDR_Right;
    public struct DDRActions
    {
        private @DDRInput m_Wrapper;
        public DDRActions(@DDRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_DDR_Up;
        public InputAction @Down => m_Wrapper.m_DDR_Down;
        public InputAction @Left => m_Wrapper.m_DDR_Left;
        public InputAction @Right => m_Wrapper.m_DDR_Right;
        public InputActionMap Get() { return m_Wrapper.m_DDR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DDRActions set) { return set.Get(); }
        public void AddCallbacks(IDDRActions instance)
        {
            if (instance == null || m_Wrapper.m_DDRActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DDRActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(IDDRActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(IDDRActions instance)
        {
            if (m_Wrapper.m_DDRActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDDRActions instance)
        {
            foreach (var item in m_Wrapper.m_DDRActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DDRActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DDRActions @DDR => new DDRActions(this);
    public interface IDDRActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
